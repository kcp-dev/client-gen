/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package clientgen

const wrappedInterfacesTempl = `

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.ClientsetName}}

import (
	"fmt"
	
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	"k8s.io/client-go/discovery"
	"k8s.io/client-go/rest"
	"{{.ClientsetAPIPath}}"

	{{$clientPath := .ClientsetAPIPath}}
	{{$pkg := .TypedPkgPath}}
	{{ range .APIs }}
	{{.PkgName}}{{.Version}} "{{$clientPath}}/typed/{{.PkgName}}/{{.Version}}"
	{{.PkgName}}{{.Version}}client "{{$pkg}}/typed/{{.PkgName}}/{{.Version}}"

	{{ end }}
)

// NewForConfig creates a new ClusterClient for the given config.
// It uses a custom round tripper that wraps the given client's
// endpoint. The clientset returned from NewForConfig is kcp
// cluster-aware.
func NewForConfig(config *rest.Config) (*ClusterClient, error) {
	client, err := rest.HTTPClientFor(config)
	if err != nil {
		return nil, fmt.Errorf("error creating HTTP client: %w", err)
	}

	clusterRoundTripper := kcp.NewClusterRoundTripper(client.Transport)
	client.Transport = clusterRoundTripper

	delegate, err := {{.InterfaceName}}.NewForConfigAndClient(config, client)
	if err != nil {
		return nil, fmt.Errorf("error creating delegate clientset: %w", err)
	}

	return &ClusterClient{
		delegate: delegate,
	}, nil
}

// ClusterClient wraps the underlying interface.
type ClusterClient struct {
	delegate {{.InterfaceName}}.Interface
}

// Cluster returns a wrapped interface scoped to a particular cluster.
func (c *ClusterClient) Cluster(cluster logicalcluster.Name) {{.InterfaceName}}.Interface {
	return &wrappedInterface{
		cluster:  cluster,
		delegate: c.delegate,
	}
}

type wrappedInterface struct {
	cluster  logicalcluster.Name
	delegate {{.InterfaceName}}.Interface
}

// Discovery retrieves the DiscoveryClient.
func (w *wrappedInterface) Discovery() discovery.DiscoveryInterface {
	return w.delegate.Discovery()
}

{{ range .APIs }}
// {{upperFirst .PkgName}}{{upperFirst .Version}} retrieves the {{upperFirst .PkgName}}{{upperFirst .Version}}Client.
func (w *wrappedInterface) {{upperFirst .PkgName}}{{upperFirst .Version}}() {{.PkgName}}{{.Version}}.{{upperFirst .PkgName}}{{upperFirst .Version}}Interface {
	return {{.PkgName}}{{.Version}}client.New(w.cluster, w.delegate.{{upperFirst .PkgName}}{{upperFirst .Version}}())
}
{{ end }}

`

const commonTempl = `

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.Version}}

import (
	{{range $element := .Imports}}
	{{$element}} {{end}}
)

// Wrapped{{upperFirst .Name}}{{upperFirst .Version}} wraps the client interface with a
// logical cluster.
type Wrapped{{upperFirst .Name}}{{upperFirst .Version}} struct {
	cluster  logicalcluster.Name
	delegate {{.Name}}{{.Version}}.{{upperFirst .Name}}{{upperFirst .Version}}Interface
}

// New creates a Wrapped{{upperFirst .Name}}{{upperFirst .Version}} with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate {{.Name}}{{.Version}}.{{upperFirst .Name}}{{upperFirst .Version}}Interface) *Wrapped{{upperFirst .Name}}{{upperFirst .Version}}{
	return &Wrapped{{upperFirst .Name}}{{upperFirst .Version}}{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *Wrapped{{upperFirst .Name}}{{upperFirst .Version}}) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

`

const wrapperMethodsTempl = `
// Wrapped{{upperFirst .PkgName}}{{upperFirst .Version}} contains the wrapped logical cluster and interface.
func (w *Wrapped{{upperFirst .PkgName}}{{upperFirst .Version}}) {{.Name|plural}}{{if .IsNamespaced}}(namespace string){{else}}(){{end}} {{.PkgName}}{{.Version}}.{{.Name}}Interface {
	return &wrapped{{.Name}}{
		cluster:  w.cluster,
		delegate: w.delegate.{{.Name|plural}}{{if .IsNamespaced}}(namespace){{else}}(){{end}},
	}
}

type wrapped{{.Name}} struct {
	cluster  logicalcluster.Name
	delegate {{.PkgName}}{{.Version}}.{{.Name}}Interface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrapped{{.Name}}. It errors when
// there is a mismatch.
func (w *wrapped{{.Name}}) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}
`
const patchTemplate = `
// Patch implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *{{.PkgName}}api{{.Version}}.{{.Name}}, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}
`
const applyTemplate = `
{{$result := typepkg . }}
{{$privateName := lowerFirst .Name}}
{{$applyConfig := (printf "*%sapply%s.%sApplyConfiguration" .PkgName .Version .Name)}}
// {{default .Method "Apply"}} implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) {{default .Method "Apply"}}(ctx context.Context, {{default .InputName $privateName}} {{default .InputType $applyConfig}}, opts metav1.ApplyOptions) (result {{default .ResultType $result}}, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.{{default .Method "Apply"}}(ctx, {{default .InputName $privateName}}, opts)
}
`

const applyStatusTemplate = `
// ApplyStatus implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) ApplyStatus(ctx context.Context, {{lowerFirst .Name}} *{{.PkgName}}apply{{.Version}}.{{.Name}}ApplyConfiguration, opts metav1.ApplyOptions) (result *{{.PkgName}}api{{.Version}}.{{.Name}}, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, {{lowerFirst .Name}}, opts)
}
`

const watchTemplate = `
// Watch implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}
`

const listTemplate = `
// List implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) List(ctx context.Context, opts metav1.ListOptions) (*{{.PkgName}}api{{.Version}}.{{.Name}}List, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}
`

const getTemplate = `
{{$result := typepkg . }}
// {{default .Method "Get"}} implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) {{default .Method "Get"}}(ctx context.Context, name string, opts metav1.GetOptions) ({{default .ResultType $result}}, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.{{default .Method "Get"}}(ctx, name, opts)
}
`
const deleteTemplate = `
// Delete implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}
`

const deleteCollectionTemplate = `
// DeleteCollection implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}
`

const createTemplate = `
{{$result := typepkg . }}
{{$privateName := lowerFirst .Name}}
// {{default .Method "Create"}} implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) {{default .Method "Create"}}(ctx context.Context, {{default .InputName $privateName}} {{default .InputType $result}}, opts metav1.CreateOptions) ({{default .ResultType $result}}, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.{{default .Method "Create"}}(ctx, {{default .InputName $privateName}}, opts)
}
`

const updateTemplate = `
{{$result := typepkg . }}
{{$privateName := lowerFirst .Name}}
// {{default .Method "Update"}} implements {{.Name}}Interface.
func (w *wrapped{{.Name}}) {{default .Method "Update"}}(ctx context.Context, {{default .InputName $privateName}} {{default .InputType $result}}, opts metav1.UpdateOptions) ({{default .ResultType $result}}, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.{{default .Method "Update"}}(ctx, {{default .InputName $privateName}}, opts)
}
`

const updateStatusTemplate = `
// UpdateStatus implements {{.Name}}Interface. It was generated because the type contains a Status member.
func (w *wrapped{{.Name}}) UpdateStatus(ctx context.Context, {{lowerFirst .Name}} *{{.PkgName}}api{{.Version}}.{{.Name}}, opts metav1.UpdateOptions) (*{{.PkgName}}api{{.Version}}.{{.Name}}, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, {{lowerFirst .Name}}, opts)
}
`
