/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package informergen

import (
	"io"
	"text/template"

	"github.com/kcp-dev/code-generator/pkg/parser"
	"k8s.io/code-generator/cmd/client-gen/types"
)

type VersionInterface struct {
	// Version is the version of this group that the interface is generated for
	Version types.Version

	// Kinds are the kinds for which this interface exposes informers
	Kinds []parser.Kind

	// PackagePath is the package under which these informers will be exposed.
	// e.g. "github.com/kcp-dev/client-go/clients/informers"
	// TODO(skuznets) we should be able to figure this out from the output dir, ideally
	PackagePath string
}

func (v *VersionInterface) WriteContent(w io.Writer) error {
	templ, err := template.New("versionInterface").Funcs(templateFuncs).Parse(versionInterfaceTemplate)
	if err != nil {
		return err
	}

	m := map[string]interface{}{
		"version":     v.Version,
		"kinds":       v.Kinds,
		"packagePath": v.PackagePath,
	}
	return templ.Execute(w, m)
}

var versionInterfaceTemplate = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.version.PackageName}}

import (
	"{{.packagePath}}/internalinterfaces"
)

type ClusterInterface interface {
{{range .kinds}}// {{.Plural}} returns a {{.String}}ClusterInformer
	{{.Plural}}() {{.String}}ClusterInformer
{{end -}}
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new ClusterInterface.
func New(f internalinterfaces.SharedInformerFactory, tweakListOptions internalinterfaces.TweakListOptionsFunc) ClusterInterface {
	return &version{factory: f, tweakListOptions: tweakListOptions}
}

{{range .kinds}}// {{.Plural}} returns a {{.String}}ClusterInformer
func (v *version) {{.Plural}}() {{.String}}ClusterInformer {
	return &{{.String|lowerFirst}}ClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}
{{end -}}
`
