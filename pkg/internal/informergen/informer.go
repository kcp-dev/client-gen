/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package informergen

import (
	"io"
	"text/template"

	"github.com/kcp-dev/code-generator/pkg/parser"
	"k8s.io/code-generator/cmd/client-gen/types"
)

type Informer struct {
	// Group is the group in this informer.
	Group types.GroupVersionInfo

	// Kind is the kind in this file.
	Kind parser.Kind

	// APIPackagePath is the root directory under which API types exist.
	// e.g. "k8s.io/api"
	APIPackagePath string

	// PackagePath is the package under which these informers will be exposed.
	// e.g. "github.com/kcp-dev/client-go/clients/informers"
	// TODO(skuznets) we should be able to figure this out from the output dir, ideally
	PackagePath string

	// ClientsetPackagePath is the package under which the cluster-aware client-set will be exposed.
	// e.g. "github.com/kcp-dev/client-go/clients/clientset/versioned"
	// TODO(skuznets) we should be able to figure this out from the output dir, ideally
	ClientsetPackagePath string

	// ListerPackagePath is the package under which the cluster-aware listers will be exposed.
	// e.g. "github.com/kcp-dev/client-go/clients/listers"
	// TODO(skuznets) we should be able to figure this out from the output dir, ideally
	ListerPackagePath string
}

func (i *Informer) WriteContent(w io.Writer) error {
	templ, err := template.New("informer").Funcs(templateFuncs).Parse(informer)
	if err != nil {
		return err
	}
	m := map[string]interface{}{
		"group":                i.Group,
		"kind":                 &i.Kind,
		"packagePath":          i.PackagePath,
		"clientsetPackagePath": i.ClientsetPackagePath,
		"apiPackagePath":       i.APIPackagePath,
		"listerPackagePath":    i.ListerPackagePath,
	}
	return templ.Execute(w, m)
}

var informer = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.group.Version.PackageName}}

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/third_party/informers"

	{{.group.PackageAlias}} "{{.apiPackagePath}}/{{.group.Group.PackageName}}/{{.group.Version.PackageName}}"
	{{.group.PackageAlias}}listers "{{.listerPackagePath}}/{{.group.Group.PackageName}}/{{.group.Version.PackageName}}"

	clientset "{{.clientsetPackagePath}}"

	"{{.packagePath}}/internalinterfaces"
)

// {{.kind}}ClusterInformer provides access to a shared informer and lister for
// {{.kind.Plural}}.
type {{.kind}}ClusterInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() {{.group.PackageAlias}}listers.{{.kind}}ClusterLister
}

type {{.kind.String | lowerFirst}}ClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New{{.kind}}ClusterInformer constructs a new informer for {{.kind.String}} type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func New{{.kind}}ClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFiltered{{.kind}}ClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFiltered{{.kind}}ClusterInformer constructs a new informer for {{.kind.String}} type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFiltered{{.kind}}ClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.{{.group.GroupGoName}}{{.group.Version}}().{{.kind.Plural}}().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.{{.group.GroupGoName}}{{.group.Version}}().{{.kind.Plural}}().Watch(context.TODO(), options)
			},
		},
		&{{.group.PackageAlias}}.{{.kind.String}}{},
		resyncPeriod,
		indexers,
	)
}

func (f *{{.kind.String|lowerFirst}}ClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFiltered{{.kind}}ClusterInformer(client, resyncPeriod, cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			{{if .kind.IsNamespaced}}kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,{{end -}}
		}, 
		f.tweakListOptions,
	)
}

func (f *{{.kind.String|lowerFirst}}ClusterInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&{{.group.PackageAlias}}.{{.kind}}{}, f.defaultInformer)
}

func (f *{{.kind.String|lowerFirst}}ClusterInformer) Lister() {{.group.PackageAlias}}listers.{{.kind.String}}ClusterLister {
	return {{.group.PackageAlias}}listers.New{{.kind}}ClusterLister(f.Informer().GetIndexer())
}
`
