/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package listergen

const apiWrapper = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code auto-generated. DO NOT EDIT.

package {{.Version}}

import (
	{{.Name}}api{{.Version}} "{{.APIPath}}"
	"github.com/kcp-dev/apimachinery/pkg/logicalcluster"
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/api/errors"
)

// Cluster returns an object that can list and get {{.Name}}.
func (s *{{.NameLowerFirst}}Lister) Cluster(cluster logicalcluster.LogicalCluster) {{.Name}}ClusterLister {
	return &{{.NameLowerFirst}}ClusterLister{indexer: s.indexer, cluster: cluster}
}

// {{.NameLowerFirst}}Lister implements the {{.Name}}Lister interface.
type {{.NameLowerFirst}}ClusterLister struct {
	indexer cache.Indexer
	cluster logicalcluster.LogicalCluster
}

// List lists all {{.Name}} in the indexer.
func (c *{{.NameLowerFirst}}ClusterLister) List(selector labels.Selector) (ret []*{{.PkgName}}{{.Version}}.{{.Name}}, err error) {
	list, err := c.indexer.ByIndex(example.ClusterIndexName, c.cluster.String())
	if err != nil {
		return nil, err
	}

	if selector == nil {
		selector = labels.Everything()
	}
	for i := range list {
		obj := list[i].(*{{.PkgName}}{{.Version}}.{{.Name}})
		if selector.Matches(labels.Set(obj.GetLabels())) {
			ret = append(ret, obj)
		}
	}

	return ret, err
}

{{if .IsNamespaced}}
// {{.Name}}s returns an object that can list and get {{.Name}}s.
func (c *{{.NameLowerFirst}}ClusterLister) {{.Name}}s(namespace string) {{.NameLowerFirst}}NamespaceLister {
	return {{.NameLowerFirst}}Lister{indexer: c.indexer, cluster: c.cluster, namespace: namespace}
}

// {{.Name}}NamespaceLister helps list and get {{.Name}}s.
// All objects returned here must be treated as read-only.
type {{.Name}}NamespaceLister interface {
	// List lists all {{.Name}}s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*{{.PkgName}}{{.Version}}.{{.Name}}, err error)
	// Get retrieves the {{.Name}} from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*{{.PkgName}}{{.Version}}.{{.Name}}, error)
	// Note(kcp): Workspace-capable Lister implementation doesn't support support expansions.
}

// {{.NameLowerFirst}}NamespaceLister implements the {{.Name}}Lister
// interface.
type {{.NameLowerFirst}}NamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.LogicalCluster
	namespace string
}

// List lists all {{.Name}}s in the indexer for a given namespace.
func (c {{.NameLowerFirst}}NamespaceLister) List(selector labels.Selector) (ret []*{{.PkgName}}{{.Version}}.{{.Name}}, err error) {
	list, err := c.indexer.Index({$$$$$$$}.ClusterAndNamespaceIndexName, &metav1.ObjectMeta{
		ZZZ_DeprecatedClusterName: c.cluster.String(),
		Namespace:                 c.namespace,
	})
	if err != nil {
		return nil, err
	}

	if selector == nil {
		selector = labels.Everything()
	}
	for i := range list {
		obj := list[i].(*{{.PkgName}}{{.Version}}.{{.Name}})
		if selector.Matches(labels.Set(obj.GetLabels())) {
			ret = append(ret, cm)
		}
	}

	return ret, err
}

// Get retrieves the {{.Name}} from the indexer for a given namespace and name.
func (c {{.NameLowerFirst}}Lister) Get(name string) (*{{.PkgName}}{{.Version}}.{{.Name}}, error) {
	meta := &metav1.ObjectMeta{
		ZZZ_DeprecatedClusterName: c.cluster.String(),
		Namespace:                 c.namespace,
		Name:                      name,
	}
	obj, exists, err := c.indexer.Get(meta)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound({{.PkgName}}{{.Version}}.Resource("{{.NameLowerFirst}}"), name)
	}
	return obj.(*{{.PkgName}}{{.Version}}.{{.Name}}), nil
}

{{end}}
`
