/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	kcpclient "github.com/kcp-dev/apimachinery/v2/pkg/client"
	"github.com/kcp-dev/logicalcluster/v3"
	v1alpha1 "k8s.io/api/rbac/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	upstreamrbacv1alpha1client "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"
)

// RoleBindingsClusterGetter has a method to return a RoleBindingClusterInterface.
// A group's client should implement this interface.
type RoleBindingsClusterGetter interface {
	RoleBindings() RoleBindingClusterInterface
}

// RoleBindingClusterInterface has methods to work with RoleBinding resources.
type RoleBindingClusterInterface interface {
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.RoleBindingList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Cluster(logicalcluster.Path) RoleBindingNamespacer
	RoleBindingExpansion
}

type roleBindingsClusterInterface struct {
	clientCache kcpclient.Cache[*upstreamrbacv1alpha1client.RbacV1alpha1Client]
}

// Cluster scopes the client down to a particular cluster.
func (c *roleBindingsClusterInterface) Cluster(clusterPath logicalcluster.Path) RoleBindingNamespacer {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}

	return &roleBindingsNamespacer{clientCache: c.clientCache, clusterPath: clusterPath}
}

// List returns the entire collection of all RoleBindings that are available in all clusters.
func (c *roleBindingsClusterInterface) List(ctx context.Context, opts metav1.ListOptions) (*v1alpha1.RoleBindingList, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).RoleBindings(metav1.NamespaceAll).List(ctx, opts)
}

// Watch begins to watch all RoleBindings across all clusters.
func (c *roleBindingsClusterInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).RoleBindings(metav1.NamespaceAll).Watch(ctx, opts)
}

// RoleBindingNamespacer can scope to objects within a namespace, returning a RoleBindingInterface.
type RoleBindingNamespacer interface {
	Namespace(name string) upstreamrbacv1alpha1client.RoleBindingInterface
}

type roleBindingsNamespacer struct {
	clientCache kcpclient.Cache[*upstreamrbacv1alpha1client.RbacV1alpha1Client]
	clusterPath logicalcluster.Path
}

func (n *roleBindingsNamespacer) Namespace(namespace string) upstreamrbacv1alpha1client.RoleBindingInterface {
	return n.clientCache.ClusterOrDie(n.clusterPath).RoleBindings(namespace)
}
