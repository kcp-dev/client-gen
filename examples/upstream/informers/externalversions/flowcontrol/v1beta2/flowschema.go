/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// Code generated by informer-gen. DO NOT EDIT.

package v1beta2

import (
	"github.com/kcp-dev/logicalcluster/v3"
	runtime "k8s.io/apimachinery/pkg/runtime"
	cache "k8s.io/client-go/tools/cache"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	versioned "k8s.io/code-generator/examples/upstream/clientset/versioned"
	internalinterfaces "k8s.io/code-generator/examples/upstream/informers/externalversions/internalinterfaces"
	v1beta2 "k8s.io/code-generator/examples/upstream/listers/flowcontrol/v1beta2"
	time "time"
	informers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	flowcontrolv1beta2 "k8s.io/api/flowcontrol/v1beta2"
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	upstreamflowcontrol.apiserver.k8s.iov1beta2informers "k8s.io/client-go/informers/v1beta2/flowcontrol.apiserver.k8s.io"
)


// FlowSchemaClusterInformer provides access to a shared informer and lister for
// FlowSchemas.
type FlowSchemaClusterInformer interface {
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() v1beta2.FlowSchemaLister
	Cluster(logicalcluster.Name) upstreamflowcontrol.apiserver.k8s.iov1beta2informers.FlowSchemaInformer
}

type flowSchemaClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	
}

// NewFlowSchemaClusterInformer constructs a new informer for FlowSchema type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFlowSchemaClusterInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredFlowSchemaClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredFlowSchemaClusterInformer constructs a new informer for FlowSchema type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredFlowSchemaClusterInformer(client versioned.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return informers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.FlowcontrolV1beta2().FlowSchemas().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.FlowcontrolV1beta2().FlowSchemas().Watch(context.TODO(), options)
			},
		},
		&flowcontrolv1beta2.FlowSchema{},
		resyncPeriod,
		indexers,
	)
}

func (f *flowSchemaClusterInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredFlowSchemaClusterInformer(client, resyncPeriod, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
		f.tweakListOptions)
}

func (f *flowSchemaInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&flowcontrolv1beta2.FlowSchema{}, f.defaultInformer)
}

func (f *flowSchemaInformer) Lister() v1beta2.FlowSchemaLister {
	return v1beta2.NewFlowSchemaLister(f.Informer().GetIndexer())
}
