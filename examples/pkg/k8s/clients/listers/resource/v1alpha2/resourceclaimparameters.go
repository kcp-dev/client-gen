//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha2

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	resourcev1alpha2 "acme.corp/pkg/apis/resource/v1alpha2"
)

// ResourceClaimParametersClusterLister can list ResourceClaimParameters across all workspaces, or scope down to a ResourceClaimParametersLister for one workspace.
// All objects returned here must be treated as read-only.
type ResourceClaimParametersClusterLister interface {
	// List lists all ResourceClaimParameters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*resourcev1alpha2.ResourceClaimParameters, err error)
	// Cluster returns a lister that can list and get ResourceClaimParameters in one workspace.
	Cluster(clusterName logicalcluster.Name) ResourceClaimParametersLister
	ResourceClaimParametersClusterListerExpansion
}

type resourceClaimParametersClusterLister struct {
	indexer cache.Indexer
}

// NewResourceClaimParametersClusterLister returns a new ResourceClaimParametersClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewResourceClaimParametersClusterLister(indexer cache.Indexer) *resourceClaimParametersClusterLister {
	return &resourceClaimParametersClusterLister{indexer: indexer}
}

// List lists all ResourceClaimParameters in the indexer across all workspaces.
func (s *resourceClaimParametersClusterLister) List(selector labels.Selector) (ret []*resourcev1alpha2.ResourceClaimParameters, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*resourcev1alpha2.ResourceClaimParameters))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ResourceClaimParameters.
func (s *resourceClaimParametersClusterLister) Cluster(clusterName logicalcluster.Name) ResourceClaimParametersLister {
	return &resourceClaimParametersLister{indexer: s.indexer, clusterName: clusterName}
}

// ResourceClaimParametersLister can list ResourceClaimParameters across all namespaces, or scope down to a ResourceClaimParametersNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type ResourceClaimParametersLister interface {
	// List lists all ResourceClaimParameters in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*resourcev1alpha2.ResourceClaimParameters, err error)
	// ResourceClaimParameters returns a lister that can list and get ResourceClaimParameters in one workspace and namespace.
	ResourceClaimParameters(namespace string) ResourceClaimParametersNamespaceLister
	ResourceClaimParametersListerExpansion
}

// resourceClaimParametersLister can list all ResourceClaimParameters inside a workspace or scope down to a ResourceClaimParametersLister for one namespace.
type resourceClaimParametersLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ResourceClaimParameters in the indexer for a workspace.
func (s *resourceClaimParametersLister) List(selector labels.Selector) (ret []*resourcev1alpha2.ResourceClaimParameters, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*resourcev1alpha2.ResourceClaimParameters))
	})
	return ret, err
}

// ResourceClaimParameters returns an object that can list and get ResourceClaimParameters in one namespace.
func (s *resourceClaimParametersLister) ResourceClaimParameters(namespace string) ResourceClaimParametersNamespaceLister {
	return &resourceClaimParametersNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// resourceClaimParametersNamespaceLister helps list and get ResourceClaimParameters.
// All objects returned here must be treated as read-only.
type ResourceClaimParametersNamespaceLister interface {
	// List lists all ResourceClaimParameters in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*resourcev1alpha2.ResourceClaimParameters, err error)
	// Get retrieves the ResourceClaimParameters from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*resourcev1alpha2.ResourceClaimParameters, error)
	ResourceClaimParametersNamespaceListerExpansion
}

// resourceClaimParametersNamespaceLister helps list and get ResourceClaimParameters.
// All objects returned here must be treated as read-only.
type resourceClaimParametersNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all ResourceClaimParameters in the indexer for a given workspace and namespace.
func (s *resourceClaimParametersNamespaceLister) List(selector labels.Selector) (ret []*resourcev1alpha2.ResourceClaimParameters, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*resourcev1alpha2.ResourceClaimParameters))
	})
	return ret, err
}

// Get retrieves the ResourceClaimParameters from the indexer for a given workspace, namespace and name.
func (s *resourceClaimParametersNamespaceLister) Get(name string) (*resourcev1alpha2.ResourceClaimParameters, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(resourcev1alpha2.Resource("resourceclaimparameters"), name)
	}
	return obj.(*resourcev1alpha2.ResourceClaimParameters), nil
}

// NewResourceClaimParametersLister returns a new ResourceClaimParametersLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewResourceClaimParametersLister(indexer cache.Indexer) *resourceClaimParametersScopedLister {
	return &resourceClaimParametersScopedLister{indexer: indexer}
}

// resourceClaimParametersScopedLister can list all ResourceClaimParameters inside a workspace or scope down to a ResourceClaimParametersLister for one namespace.
type resourceClaimParametersScopedLister struct {
	indexer cache.Indexer
}

// List lists all ResourceClaimParameters in the indexer for a workspace.
func (s *resourceClaimParametersScopedLister) List(selector labels.Selector) (ret []*resourcev1alpha2.ResourceClaimParameters, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*resourcev1alpha2.ResourceClaimParameters))
	})
	return ret, err
}

// ResourceClaimParameters returns an object that can list and get ResourceClaimParameters in one namespace.
func (s *resourceClaimParametersScopedLister) ResourceClaimParameters(namespace string) ResourceClaimParametersNamespaceLister {
	return &resourceClaimParametersScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// resourceClaimParametersScopedNamespaceLister helps list and get ResourceClaimParameters.
type resourceClaimParametersScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceClaimParameters in the indexer for a given workspace and namespace.
func (s *resourceClaimParametersScopedNamespaceLister) List(selector labels.Selector) (ret []*resourcev1alpha2.ResourceClaimParameters, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*resourcev1alpha2.ResourceClaimParameters))
	})
	return ret, err
}

// Get retrieves the ResourceClaimParameters from the indexer for a given workspace, namespace and name.
func (s *resourceClaimParametersScopedNamespaceLister) Get(name string) (*resourcev1alpha2.ResourceClaimParameters, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(resourcev1alpha2.Resource("resourceclaimparameters"), name)
	}
	return obj.(*resourcev1alpha2.ResourceClaimParameters), nil
}
