//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	admissionregistrationv1alpha1 "acme.corp/pkg/apis/admissionregistration/v1alpha1"
)

// ValidatingAdmissionPolicyClusterLister can list ValidatingAdmissionPolicies across all workspaces, or scope down to a ValidatingAdmissionPolicyLister for one workspace.
// All objects returned here must be treated as read-only.
type ValidatingAdmissionPolicyClusterLister interface {
	// List lists all ValidatingAdmissionPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*admissionregistrationv1alpha1.ValidatingAdmissionPolicy, err error)
	// Cluster returns a lister that can list and get ValidatingAdmissionPolicies in one workspace.
	Cluster(clusterName logicalcluster.Name) ValidatingAdmissionPolicyLister
	ValidatingAdmissionPolicyClusterListerExpansion
}

type validatingAdmissionPolicyClusterLister struct {
	indexer cache.Indexer
}

// NewValidatingAdmissionPolicyClusterLister returns a new ValidatingAdmissionPolicyClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewValidatingAdmissionPolicyClusterLister(indexer cache.Indexer) *validatingAdmissionPolicyClusterLister {
	return &validatingAdmissionPolicyClusterLister{indexer: indexer}
}

// List lists all ValidatingAdmissionPolicies in the indexer across all workspaces.
func (s *validatingAdmissionPolicyClusterLister) List(selector labels.Selector) (ret []*admissionregistrationv1alpha1.ValidatingAdmissionPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*admissionregistrationv1alpha1.ValidatingAdmissionPolicy))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ValidatingAdmissionPolicies.
func (s *validatingAdmissionPolicyClusterLister) Cluster(clusterName logicalcluster.Name) ValidatingAdmissionPolicyLister {
	return &validatingAdmissionPolicyLister{indexer: s.indexer, clusterName: clusterName}
}

// ValidatingAdmissionPolicyLister can list all ValidatingAdmissionPolicies, or get one in particular.
// All objects returned here must be treated as read-only.
type ValidatingAdmissionPolicyLister interface {
	// List lists all ValidatingAdmissionPolicies in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*admissionregistrationv1alpha1.ValidatingAdmissionPolicy, err error)
	// Get retrieves the ValidatingAdmissionPolicy from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*admissionregistrationv1alpha1.ValidatingAdmissionPolicy, error)
	ValidatingAdmissionPolicyListerExpansion
}

// validatingAdmissionPolicyLister can list all ValidatingAdmissionPolicies inside a workspace.
type validatingAdmissionPolicyLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ValidatingAdmissionPolicies in the indexer for a workspace.
func (s *validatingAdmissionPolicyLister) List(selector labels.Selector) (ret []*admissionregistrationv1alpha1.ValidatingAdmissionPolicy, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*admissionregistrationv1alpha1.ValidatingAdmissionPolicy))
	})
	return ret, err
}

// Get retrieves the ValidatingAdmissionPolicy from the indexer for a given workspace and name.
func (s *validatingAdmissionPolicyLister) Get(name string) (*admissionregistrationv1alpha1.ValidatingAdmissionPolicy, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(admissionregistrationv1alpha1.Resource("validatingadmissionpolicies"), name)
	}
	return obj.(*admissionregistrationv1alpha1.ValidatingAdmissionPolicy), nil
}

// NewValidatingAdmissionPolicyLister returns a new ValidatingAdmissionPolicyLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewValidatingAdmissionPolicyLister(indexer cache.Indexer) *validatingAdmissionPolicyScopedLister {
	return &validatingAdmissionPolicyScopedLister{indexer: indexer}
}

// validatingAdmissionPolicyScopedLister can list all ValidatingAdmissionPolicies inside a workspace.
type validatingAdmissionPolicyScopedLister struct {
	indexer cache.Indexer
}

// List lists all ValidatingAdmissionPolicies in the indexer for a workspace.
func (s *validatingAdmissionPolicyScopedLister) List(selector labels.Selector) (ret []*admissionregistrationv1alpha1.ValidatingAdmissionPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*admissionregistrationv1alpha1.ValidatingAdmissionPolicy))
	})
	return ret, err
}

// Get retrieves the ValidatingAdmissionPolicy from the indexer for a given workspace and name.
func (s *validatingAdmissionPolicyScopedLister) Get(name string) (*admissionregistrationv1alpha1.ValidatingAdmissionPolicy, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(admissionregistrationv1alpha1.Resource("validatingadmissionpolicies"), name)
	}
	return obj.(*admissionregistrationv1alpha1.ValidatingAdmissionPolicy), nil
}
