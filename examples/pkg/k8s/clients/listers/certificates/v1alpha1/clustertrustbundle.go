//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	certificatesv1alpha1 "acme.corp/pkg/apis/certificates/v1alpha1"
)

// ClusterTrustBundleClusterLister can list ClusterTrustBundles across all workspaces, or scope down to a ClusterTrustBundleLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterTrustBundleClusterLister interface {
	// List lists all ClusterTrustBundles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*certificatesv1alpha1.ClusterTrustBundle, err error)
	// Cluster returns a lister that can list and get ClusterTrustBundles in one workspace.
	Cluster(clusterName logicalcluster.Name) ClusterTrustBundleLister
	ClusterTrustBundleClusterListerExpansion
}

type clusterTrustBundleClusterLister struct {
	indexer cache.Indexer
}

// NewClusterTrustBundleClusterLister returns a new ClusterTrustBundleClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterTrustBundleClusterLister(indexer cache.Indexer) *clusterTrustBundleClusterLister {
	return &clusterTrustBundleClusterLister{indexer: indexer}
}

// List lists all ClusterTrustBundles in the indexer across all workspaces.
func (s *clusterTrustBundleClusterLister) List(selector labels.Selector) (ret []*certificatesv1alpha1.ClusterTrustBundle, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*certificatesv1alpha1.ClusterTrustBundle))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterTrustBundles.
func (s *clusterTrustBundleClusterLister) Cluster(clusterName logicalcluster.Name) ClusterTrustBundleLister {
	return &clusterTrustBundleLister{indexer: s.indexer, clusterName: clusterName}
}

// ClusterTrustBundleLister can list all ClusterTrustBundles, or get one in particular.
// All objects returned here must be treated as read-only.
type ClusterTrustBundleLister interface {
	// List lists all ClusterTrustBundles in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*certificatesv1alpha1.ClusterTrustBundle, err error)
	// Get retrieves the ClusterTrustBundle from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*certificatesv1alpha1.ClusterTrustBundle, error)
	ClusterTrustBundleListerExpansion
}

// clusterTrustBundleLister can list all ClusterTrustBundles inside a workspace.
type clusterTrustBundleLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ClusterTrustBundles in the indexer for a workspace.
func (s *clusterTrustBundleLister) List(selector labels.Selector) (ret []*certificatesv1alpha1.ClusterTrustBundle, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*certificatesv1alpha1.ClusterTrustBundle))
	})
	return ret, err
}

// Get retrieves the ClusterTrustBundle from the indexer for a given workspace and name.
func (s *clusterTrustBundleLister) Get(name string) (*certificatesv1alpha1.ClusterTrustBundle, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(certificatesv1alpha1.Resource("clustertrustbundles"), name)
	}
	return obj.(*certificatesv1alpha1.ClusterTrustBundle), nil
}

// NewClusterTrustBundleLister returns a new ClusterTrustBundleLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewClusterTrustBundleLister(indexer cache.Indexer) *clusterTrustBundleScopedLister {
	return &clusterTrustBundleScopedLister{indexer: indexer}
}

// clusterTrustBundleScopedLister can list all ClusterTrustBundles inside a workspace.
type clusterTrustBundleScopedLister struct {
	indexer cache.Indexer
}

// List lists all ClusterTrustBundles in the indexer for a workspace.
func (s *clusterTrustBundleScopedLister) List(selector labels.Selector) (ret []*certificatesv1alpha1.ClusterTrustBundle, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*certificatesv1alpha1.ClusterTrustBundle))
	})
	return ret, err
}

// Get retrieves the ClusterTrustBundle from the indexer for a given workspace and name.
func (s *clusterTrustBundleScopedLister) Get(name string) (*certificatesv1alpha1.ClusterTrustBundle, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(certificatesv1alpha1.Resource("clustertrustbundles"), name)
	}
	return obj.(*certificatesv1alpha1.ClusterTrustBundle), nil
}
