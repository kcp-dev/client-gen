//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	storagev1beta1 "acme.corp/pkg/apis/storage/v1beta1"
)

// CSIStorageCapacityClusterLister can list CSIStorageCapacities across all workspaces, or scope down to a CSIStorageCapacityLister for one workspace.
// All objects returned here must be treated as read-only.
type CSIStorageCapacityClusterLister interface {
	// List lists all CSIStorageCapacities in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storagev1beta1.CSIStorageCapacity, err error)
	// Cluster returns a lister that can list and get CSIStorageCapacities in one workspace.
	Cluster(clusterName logicalcluster.Name) CSIStorageCapacityLister
	CSIStorageCapacityClusterListerExpansion
}

type cSIStorageCapacityClusterLister struct {
	indexer cache.Indexer
}

// NewCSIStorageCapacityClusterLister returns a new CSIStorageCapacityClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewCSIStorageCapacityClusterLister(indexer cache.Indexer) *cSIStorageCapacityClusterLister {
	return &cSIStorageCapacityClusterLister{indexer: indexer}
}

// List lists all CSIStorageCapacities in the indexer across all workspaces.
func (s *cSIStorageCapacityClusterLister) List(selector labels.Selector) (ret []*storagev1beta1.CSIStorageCapacity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*storagev1beta1.CSIStorageCapacity))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get CSIStorageCapacities.
func (s *cSIStorageCapacityClusterLister) Cluster(clusterName logicalcluster.Name) CSIStorageCapacityLister {
	return &cSIStorageCapacityLister{indexer: s.indexer, clusterName: clusterName}
}

// CSIStorageCapacityLister can list CSIStorageCapacities across all namespaces, or scope down to a CSIStorageCapacityNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type CSIStorageCapacityLister interface {
	// List lists all CSIStorageCapacities in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storagev1beta1.CSIStorageCapacity, err error)
	// CSIStorageCapacities returns a lister that can list and get CSIStorageCapacities in one workspace and namespace.
	CSIStorageCapacities(namespace string) CSIStorageCapacityNamespaceLister
	CSIStorageCapacityListerExpansion
}

// cSIStorageCapacityLister can list all CSIStorageCapacities inside a workspace or scope down to a CSIStorageCapacityLister for one namespace.
type cSIStorageCapacityLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all CSIStorageCapacities in the indexer for a workspace.
func (s *cSIStorageCapacityLister) List(selector labels.Selector) (ret []*storagev1beta1.CSIStorageCapacity, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*storagev1beta1.CSIStorageCapacity))
	})
	return ret, err
}

// CSIStorageCapacities returns an object that can list and get CSIStorageCapacities in one namespace.
func (s *cSIStorageCapacityLister) CSIStorageCapacities(namespace string) CSIStorageCapacityNamespaceLister {
	return &cSIStorageCapacityNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// cSIStorageCapacityNamespaceLister helps list and get CSIStorageCapacities.
// All objects returned here must be treated as read-only.
type CSIStorageCapacityNamespaceLister interface {
	// List lists all CSIStorageCapacities in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storagev1beta1.CSIStorageCapacity, err error)
	// Get retrieves the CSIStorageCapacity from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*storagev1beta1.CSIStorageCapacity, error)
	CSIStorageCapacityNamespaceListerExpansion
}

// cSIStorageCapacityNamespaceLister helps list and get CSIStorageCapacities.
// All objects returned here must be treated as read-only.
type cSIStorageCapacityNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all CSIStorageCapacities in the indexer for a given workspace and namespace.
func (s *cSIStorageCapacityNamespaceLister) List(selector labels.Selector) (ret []*storagev1beta1.CSIStorageCapacity, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*storagev1beta1.CSIStorageCapacity))
	})
	return ret, err
}

// Get retrieves the CSIStorageCapacity from the indexer for a given workspace, namespace and name.
func (s *cSIStorageCapacityNamespaceLister) Get(name string) (*storagev1beta1.CSIStorageCapacity, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(storagev1beta1.Resource("csistoragecapacities"), name)
	}
	return obj.(*storagev1beta1.CSIStorageCapacity), nil
}

// NewCSIStorageCapacityLister returns a new CSIStorageCapacityLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewCSIStorageCapacityLister(indexer cache.Indexer) *cSIStorageCapacityScopedLister {
	return &cSIStorageCapacityScopedLister{indexer: indexer}
}

// cSIStorageCapacityScopedLister can list all CSIStorageCapacities inside a workspace or scope down to a CSIStorageCapacityLister for one namespace.
type cSIStorageCapacityScopedLister struct {
	indexer cache.Indexer
}

// List lists all CSIStorageCapacities in the indexer for a workspace.
func (s *cSIStorageCapacityScopedLister) List(selector labels.Selector) (ret []*storagev1beta1.CSIStorageCapacity, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*storagev1beta1.CSIStorageCapacity))
	})
	return ret, err
}

// CSIStorageCapacities returns an object that can list and get CSIStorageCapacities in one namespace.
func (s *cSIStorageCapacityScopedLister) CSIStorageCapacities(namespace string) CSIStorageCapacityNamespaceLister {
	return &cSIStorageCapacityScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// cSIStorageCapacityScopedNamespaceLister helps list and get CSIStorageCapacities.
type cSIStorageCapacityScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CSIStorageCapacities in the indexer for a given workspace and namespace.
func (s *cSIStorageCapacityScopedNamespaceLister) List(selector labels.Selector) (ret []*storagev1beta1.CSIStorageCapacity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*storagev1beta1.CSIStorageCapacity))
	})
	return ret, err
}

// Get retrieves the CSIStorageCapacity from the indexer for a given workspace, namespace and name.
func (s *cSIStorageCapacityScopedNamespaceLister) Get(name string) (*storagev1beta1.CSIStorageCapacity, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(storagev1beta1.Resource("csistoragecapacities"), name)
	}
	return obj.(*storagev1beta1.CSIStorageCapacity), nil
}
