//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	policyv1 "acme.corp/pkg/apis/policy/v1"
)

// PodDisruptionBudgetClusterLister can list PodDisruptionBudgets across all workspaces, or scope down to a PodDisruptionBudgetLister for one workspace.
// All objects returned here must be treated as read-only.
type PodDisruptionBudgetClusterLister interface {
	// List lists all PodDisruptionBudgets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*policyv1.PodDisruptionBudget, err error)
	// Cluster returns a lister that can list and get PodDisruptionBudgets in one workspace.
	Cluster(clusterName logicalcluster.Name) PodDisruptionBudgetLister
	PodDisruptionBudgetClusterListerExpansion
}

type podDisruptionBudgetClusterLister struct {
	indexer cache.Indexer
}

// NewPodDisruptionBudgetClusterLister returns a new PodDisruptionBudgetClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPodDisruptionBudgetClusterLister(indexer cache.Indexer) *podDisruptionBudgetClusterLister {
	return &podDisruptionBudgetClusterLister{indexer: indexer}
}

// List lists all PodDisruptionBudgets in the indexer across all workspaces.
func (s *podDisruptionBudgetClusterLister) List(selector labels.Selector) (ret []*policyv1.PodDisruptionBudget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*policyv1.PodDisruptionBudget))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get PodDisruptionBudgets.
func (s *podDisruptionBudgetClusterLister) Cluster(clusterName logicalcluster.Name) PodDisruptionBudgetLister {
	return &podDisruptionBudgetLister{indexer: s.indexer, clusterName: clusterName}
}

// PodDisruptionBudgetLister can list PodDisruptionBudgets across all namespaces, or scope down to a PodDisruptionBudgetNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type PodDisruptionBudgetLister interface {
	// List lists all PodDisruptionBudgets in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*policyv1.PodDisruptionBudget, err error)
	// PodDisruptionBudgets returns a lister that can list and get PodDisruptionBudgets in one workspace and namespace.
	PodDisruptionBudgets(namespace string) PodDisruptionBudgetNamespaceLister
	PodDisruptionBudgetListerExpansion
}

// podDisruptionBudgetLister can list all PodDisruptionBudgets inside a workspace or scope down to a PodDisruptionBudgetLister for one namespace.
type podDisruptionBudgetLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all PodDisruptionBudgets in the indexer for a workspace.
func (s *podDisruptionBudgetLister) List(selector labels.Selector) (ret []*policyv1.PodDisruptionBudget, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*policyv1.PodDisruptionBudget))
	})
	return ret, err
}

// PodDisruptionBudgets returns an object that can list and get PodDisruptionBudgets in one namespace.
func (s *podDisruptionBudgetLister) PodDisruptionBudgets(namespace string) PodDisruptionBudgetNamespaceLister {
	return &podDisruptionBudgetNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// podDisruptionBudgetNamespaceLister helps list and get PodDisruptionBudgets.
// All objects returned here must be treated as read-only.
type PodDisruptionBudgetNamespaceLister interface {
	// List lists all PodDisruptionBudgets in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*policyv1.PodDisruptionBudget, err error)
	// Get retrieves the PodDisruptionBudget from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*policyv1.PodDisruptionBudget, error)
	PodDisruptionBudgetNamespaceListerExpansion
}

// podDisruptionBudgetNamespaceLister helps list and get PodDisruptionBudgets.
// All objects returned here must be treated as read-only.
type podDisruptionBudgetNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all PodDisruptionBudgets in the indexer for a given workspace and namespace.
func (s *podDisruptionBudgetNamespaceLister) List(selector labels.Selector) (ret []*policyv1.PodDisruptionBudget, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*policyv1.PodDisruptionBudget))
	})
	return ret, err
}

// Get retrieves the PodDisruptionBudget from the indexer for a given workspace, namespace and name.
func (s *podDisruptionBudgetNamespaceLister) Get(name string) (*policyv1.PodDisruptionBudget, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(policyv1.Resource("poddisruptionbudgets"), name)
	}
	return obj.(*policyv1.PodDisruptionBudget), nil
}

// NewPodDisruptionBudgetLister returns a new PodDisruptionBudgetLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewPodDisruptionBudgetLister(indexer cache.Indexer) *podDisruptionBudgetScopedLister {
	return &podDisruptionBudgetScopedLister{indexer: indexer}
}

// podDisruptionBudgetScopedLister can list all PodDisruptionBudgets inside a workspace or scope down to a PodDisruptionBudgetLister for one namespace.
type podDisruptionBudgetScopedLister struct {
	indexer cache.Indexer
}

// List lists all PodDisruptionBudgets in the indexer for a workspace.
func (s *podDisruptionBudgetScopedLister) List(selector labels.Selector) (ret []*policyv1.PodDisruptionBudget, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*policyv1.PodDisruptionBudget))
	})
	return ret, err
}

// PodDisruptionBudgets returns an object that can list and get PodDisruptionBudgets in one namespace.
func (s *podDisruptionBudgetScopedLister) PodDisruptionBudgets(namespace string) PodDisruptionBudgetNamespaceLister {
	return &podDisruptionBudgetScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// podDisruptionBudgetScopedNamespaceLister helps list and get PodDisruptionBudgets.
type podDisruptionBudgetScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodDisruptionBudgets in the indexer for a given workspace and namespace.
func (s *podDisruptionBudgetScopedNamespaceLister) List(selector labels.Selector) (ret []*policyv1.PodDisruptionBudget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*policyv1.PodDisruptionBudget))
	})
	return ret, err
}

// Get retrieves the PodDisruptionBudget from the indexer for a given workspace, namespace and name.
func (s *podDisruptionBudgetScopedNamespaceLister) Get(name string) (*policyv1.PodDisruptionBudget, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(policyv1.Resource("poddisruptionbudgets"), name)
	}
	return obj.(*policyv1.PodDisruptionBudget), nil
}
