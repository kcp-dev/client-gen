//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	extensionsv1beta1 "acme.corp/pkg/apis/extensions/v1beta1"
)

// DeploymentClusterLister can list Deployments across all workspaces, or scope down to a DeploymentLister for one workspace.
// All objects returned here must be treated as read-only.
type DeploymentClusterLister interface {
	// List lists all Deployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*extensionsv1beta1.Deployment, err error)
	// Cluster returns a lister that can list and get Deployments in one workspace.
	Cluster(clusterName logicalcluster.Name) DeploymentLister
	DeploymentClusterListerExpansion
}

type deploymentClusterLister struct {
	indexer cache.Indexer
}

// NewDeploymentClusterLister returns a new DeploymentClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewDeploymentClusterLister(indexer cache.Indexer) *deploymentClusterLister {
	return &deploymentClusterLister{indexer: indexer}
}

// List lists all Deployments in the indexer across all workspaces.
func (s *deploymentClusterLister) List(selector labels.Selector) (ret []*extensionsv1beta1.Deployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*extensionsv1beta1.Deployment))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Deployments.
func (s *deploymentClusterLister) Cluster(clusterName logicalcluster.Name) DeploymentLister {
	return &deploymentLister{indexer: s.indexer, clusterName: clusterName}
}

// DeploymentLister can list Deployments across all namespaces, or scope down to a DeploymentNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type DeploymentLister interface {
	// List lists all Deployments in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*extensionsv1beta1.Deployment, err error)
	// Deployments returns a lister that can list and get Deployments in one workspace and namespace.
	Deployments(namespace string) DeploymentNamespaceLister
	DeploymentListerExpansion
}

// deploymentLister can list all Deployments inside a workspace or scope down to a DeploymentLister for one namespace.
type deploymentLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Deployments in the indexer for a workspace.
func (s *deploymentLister) List(selector labels.Selector) (ret []*extensionsv1beta1.Deployment, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*extensionsv1beta1.Deployment))
	})
	return ret, err
}

// Deployments returns an object that can list and get Deployments in one namespace.
func (s *deploymentLister) Deployments(namespace string) DeploymentNamespaceLister {
	return &deploymentNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// deploymentNamespaceLister helps list and get Deployments.
// All objects returned here must be treated as read-only.
type DeploymentNamespaceLister interface {
	// List lists all Deployments in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*extensionsv1beta1.Deployment, err error)
	// Get retrieves the Deployment from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*extensionsv1beta1.Deployment, error)
	DeploymentNamespaceListerExpansion
}

// deploymentNamespaceLister helps list and get Deployments.
// All objects returned here must be treated as read-only.
type deploymentNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all Deployments in the indexer for a given workspace and namespace.
func (s *deploymentNamespaceLister) List(selector labels.Selector) (ret []*extensionsv1beta1.Deployment, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*extensionsv1beta1.Deployment))
	})
	return ret, err
}

// Get retrieves the Deployment from the indexer for a given workspace, namespace and name.
func (s *deploymentNamespaceLister) Get(name string) (*extensionsv1beta1.Deployment, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(extensionsv1beta1.Resource("deployments"), name)
	}
	return obj.(*extensionsv1beta1.Deployment), nil
}

// NewDeploymentLister returns a new DeploymentLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewDeploymentLister(indexer cache.Indexer) *deploymentScopedLister {
	return &deploymentScopedLister{indexer: indexer}
}

// deploymentScopedLister can list all Deployments inside a workspace or scope down to a DeploymentLister for one namespace.
type deploymentScopedLister struct {
	indexer cache.Indexer
}

// List lists all Deployments in the indexer for a workspace.
func (s *deploymentScopedLister) List(selector labels.Selector) (ret []*extensionsv1beta1.Deployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*extensionsv1beta1.Deployment))
	})
	return ret, err
}

// Deployments returns an object that can list and get Deployments in one namespace.
func (s *deploymentScopedLister) Deployments(namespace string) DeploymentNamespaceLister {
	return &deploymentScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// deploymentScopedNamespaceLister helps list and get Deployments.
type deploymentScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Deployments in the indexer for a given workspace and namespace.
func (s *deploymentScopedNamespaceLister) List(selector labels.Selector) (ret []*extensionsv1beta1.Deployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*extensionsv1beta1.Deployment))
	})
	return ret, err
}

// Get retrieves the Deployment from the indexer for a given workspace, namespace and name.
func (s *deploymentScopedNamespaceLister) Get(name string) (*extensionsv1beta1.Deployment, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(extensionsv1beta1.Resource("deployments"), name)
	}
	return obj.(*extensionsv1beta1.Deployment), nil
}
