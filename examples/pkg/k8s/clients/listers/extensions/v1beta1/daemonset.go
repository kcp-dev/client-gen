//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	extensionsv1beta1 "acme.corp/pkg/apis/extensions/v1beta1"
)

// DaemonSetClusterLister can list DaemonSets across all workspaces, or scope down to a DaemonSetLister for one workspace.
// All objects returned here must be treated as read-only.
type DaemonSetClusterLister interface {
	// List lists all DaemonSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error)
	// Cluster returns a lister that can list and get DaemonSets in one workspace.
	Cluster(clusterName logicalcluster.Name) DaemonSetLister
	DaemonSetClusterListerExpansion
}

type daemonSetClusterLister struct {
	indexer cache.Indexer
}

// NewDaemonSetClusterLister returns a new DaemonSetClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewDaemonSetClusterLister(indexer cache.Indexer) *daemonSetClusterLister {
	return &daemonSetClusterLister{indexer: indexer}
}

// List lists all DaemonSets in the indexer across all workspaces.
func (s *daemonSetClusterLister) List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*extensionsv1beta1.DaemonSet))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get DaemonSets.
func (s *daemonSetClusterLister) Cluster(clusterName logicalcluster.Name) DaemonSetLister {
	return &daemonSetLister{indexer: s.indexer, clusterName: clusterName}
}

// DaemonSetLister can list DaemonSets across all namespaces, or scope down to a DaemonSetNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type DaemonSetLister interface {
	// List lists all DaemonSets in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error)
	// DaemonSets returns a lister that can list and get DaemonSets in one workspace and namespace.
	DaemonSets(namespace string) DaemonSetNamespaceLister
	DaemonSetListerExpansion
}

// daemonSetLister can list all DaemonSets inside a workspace or scope down to a DaemonSetLister for one namespace.
type daemonSetLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all DaemonSets in the indexer for a workspace.
func (s *daemonSetLister) List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*extensionsv1beta1.DaemonSet))
	})
	return ret, err
}

// DaemonSets returns an object that can list and get DaemonSets in one namespace.
func (s *daemonSetLister) DaemonSets(namespace string) DaemonSetNamespaceLister {
	return &daemonSetNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// daemonSetNamespaceLister helps list and get DaemonSets.
// All objects returned here must be treated as read-only.
type DaemonSetNamespaceLister interface {
	// List lists all DaemonSets in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error)
	// Get retrieves the DaemonSet from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*extensionsv1beta1.DaemonSet, error)
	DaemonSetNamespaceListerExpansion
}

// daemonSetNamespaceLister helps list and get DaemonSets.
// All objects returned here must be treated as read-only.
type daemonSetNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all DaemonSets in the indexer for a given workspace and namespace.
func (s *daemonSetNamespaceLister) List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*extensionsv1beta1.DaemonSet))
	})
	return ret, err
}

// Get retrieves the DaemonSet from the indexer for a given workspace, namespace and name.
func (s *daemonSetNamespaceLister) Get(name string) (*extensionsv1beta1.DaemonSet, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(extensionsv1beta1.Resource("daemonsets"), name)
	}
	return obj.(*extensionsv1beta1.DaemonSet), nil
}

// NewDaemonSetLister returns a new DaemonSetLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewDaemonSetLister(indexer cache.Indexer) *daemonSetScopedLister {
	return &daemonSetScopedLister{indexer: indexer}
}

// daemonSetScopedLister can list all DaemonSets inside a workspace or scope down to a DaemonSetLister for one namespace.
type daemonSetScopedLister struct {
	indexer cache.Indexer
}

// List lists all DaemonSets in the indexer for a workspace.
func (s *daemonSetScopedLister) List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*extensionsv1beta1.DaemonSet))
	})
	return ret, err
}

// DaemonSets returns an object that can list and get DaemonSets in one namespace.
func (s *daemonSetScopedLister) DaemonSets(namespace string) DaemonSetNamespaceLister {
	return &daemonSetScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// daemonSetScopedNamespaceLister helps list and get DaemonSets.
type daemonSetScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DaemonSets in the indexer for a given workspace and namespace.
func (s *daemonSetScopedNamespaceLister) List(selector labels.Selector) (ret []*extensionsv1beta1.DaemonSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*extensionsv1beta1.DaemonSet))
	})
	return ret, err
}

// Get retrieves the DaemonSet from the indexer for a given workspace, namespace and name.
func (s *daemonSetScopedNamespaceLister) Get(name string) (*extensionsv1beta1.DaemonSet, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(extensionsv1beta1.Resource("daemonsets"), name)
	}
	return obj.(*extensionsv1beta1.DaemonSet), nil
}
