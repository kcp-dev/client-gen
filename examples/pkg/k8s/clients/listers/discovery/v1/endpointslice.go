//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	discoveryv1 "acme.corp/pkg/apis/discovery/v1"
)

// EndpointSliceClusterLister can list EndpointSlices across all workspaces, or scope down to a EndpointSliceLister for one workspace.
// All objects returned here must be treated as read-only.
type EndpointSliceClusterLister interface {
	// List lists all EndpointSlices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*discoveryv1.EndpointSlice, err error)
	// Cluster returns a lister that can list and get EndpointSlices in one workspace.
	Cluster(clusterName logicalcluster.Name) EndpointSliceLister
	EndpointSliceClusterListerExpansion
}

type endpointSliceClusterLister struct {
	indexer cache.Indexer
}

// NewEndpointSliceClusterLister returns a new EndpointSliceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewEndpointSliceClusterLister(indexer cache.Indexer) *endpointSliceClusterLister {
	return &endpointSliceClusterLister{indexer: indexer}
}

// List lists all EndpointSlices in the indexer across all workspaces.
func (s *endpointSliceClusterLister) List(selector labels.Selector) (ret []*discoveryv1.EndpointSlice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*discoveryv1.EndpointSlice))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get EndpointSlices.
func (s *endpointSliceClusterLister) Cluster(clusterName logicalcluster.Name) EndpointSliceLister {
	return &endpointSliceLister{indexer: s.indexer, clusterName: clusterName}
}

// EndpointSliceLister can list EndpointSlices across all namespaces, or scope down to a EndpointSliceNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type EndpointSliceLister interface {
	// List lists all EndpointSlices in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*discoveryv1.EndpointSlice, err error)
	// EndpointSlices returns a lister that can list and get EndpointSlices in one workspace and namespace.
	EndpointSlices(namespace string) EndpointSliceNamespaceLister
	EndpointSliceListerExpansion
}

// endpointSliceLister can list all EndpointSlices inside a workspace or scope down to a EndpointSliceLister for one namespace.
type endpointSliceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all EndpointSlices in the indexer for a workspace.
func (s *endpointSliceLister) List(selector labels.Selector) (ret []*discoveryv1.EndpointSlice, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*discoveryv1.EndpointSlice))
	})
	return ret, err
}

// EndpointSlices returns an object that can list and get EndpointSlices in one namespace.
func (s *endpointSliceLister) EndpointSlices(namespace string) EndpointSliceNamespaceLister {
	return &endpointSliceNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// endpointSliceNamespaceLister helps list and get EndpointSlices.
// All objects returned here must be treated as read-only.
type EndpointSliceNamespaceLister interface {
	// List lists all EndpointSlices in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*discoveryv1.EndpointSlice, err error)
	// Get retrieves the EndpointSlice from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*discoveryv1.EndpointSlice, error)
	EndpointSliceNamespaceListerExpansion
}

// endpointSliceNamespaceLister helps list and get EndpointSlices.
// All objects returned here must be treated as read-only.
type endpointSliceNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all EndpointSlices in the indexer for a given workspace and namespace.
func (s *endpointSliceNamespaceLister) List(selector labels.Selector) (ret []*discoveryv1.EndpointSlice, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*discoveryv1.EndpointSlice))
	})
	return ret, err
}

// Get retrieves the EndpointSlice from the indexer for a given workspace, namespace and name.
func (s *endpointSliceNamespaceLister) Get(name string) (*discoveryv1.EndpointSlice, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(discoveryv1.Resource("endpointslices"), name)
	}
	return obj.(*discoveryv1.EndpointSlice), nil
}

// NewEndpointSliceLister returns a new EndpointSliceLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewEndpointSliceLister(indexer cache.Indexer) *endpointSliceScopedLister {
	return &endpointSliceScopedLister{indexer: indexer}
}

// endpointSliceScopedLister can list all EndpointSlices inside a workspace or scope down to a EndpointSliceLister for one namespace.
type endpointSliceScopedLister struct {
	indexer cache.Indexer
}

// List lists all EndpointSlices in the indexer for a workspace.
func (s *endpointSliceScopedLister) List(selector labels.Selector) (ret []*discoveryv1.EndpointSlice, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*discoveryv1.EndpointSlice))
	})
	return ret, err
}

// EndpointSlices returns an object that can list and get EndpointSlices in one namespace.
func (s *endpointSliceScopedLister) EndpointSlices(namespace string) EndpointSliceNamespaceLister {
	return &endpointSliceScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// endpointSliceScopedNamespaceLister helps list and get EndpointSlices.
type endpointSliceScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointSlices in the indexer for a given workspace and namespace.
func (s *endpointSliceScopedNamespaceLister) List(selector labels.Selector) (ret []*discoveryv1.EndpointSlice, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*discoveryv1.EndpointSlice))
	})
	return ret, err
}

// Get retrieves the EndpointSlice from the indexer for a given workspace, namespace and name.
func (s *endpointSliceScopedNamespaceLister) Get(name string) (*discoveryv1.EndpointSlice, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(discoveryv1.Resource("endpointslices"), name)
	}
	return obj.(*discoveryv1.EndpointSlice), nil
}
