//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	corev1 "acme.corp/pkg/apis/core/v1"
)

// PersistentVolumeClusterLister can list PersistentVolumes across all workspaces, or scope down to a PersistentVolumeLister for one workspace.
// All objects returned here must be treated as read-only.
type PersistentVolumeClusterLister interface {
	// List lists all PersistentVolumes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.PersistentVolume, err error)
	// Cluster returns a lister that can list and get PersistentVolumes in one workspace.
	Cluster(clusterName logicalcluster.Name) PersistentVolumeLister
	PersistentVolumeClusterListerExpansion
}

type persistentVolumeClusterLister struct {
	indexer cache.Indexer
}

// NewPersistentVolumeClusterLister returns a new PersistentVolumeClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPersistentVolumeClusterLister(indexer cache.Indexer) *persistentVolumeClusterLister {
	return &persistentVolumeClusterLister{indexer: indexer}
}

// List lists all PersistentVolumes in the indexer across all workspaces.
func (s *persistentVolumeClusterLister) List(selector labels.Selector) (ret []*corev1.PersistentVolume, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*corev1.PersistentVolume))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get PersistentVolumes.
func (s *persistentVolumeClusterLister) Cluster(clusterName logicalcluster.Name) PersistentVolumeLister {
	return &persistentVolumeLister{indexer: s.indexer, clusterName: clusterName}
}

// PersistentVolumeLister can list all PersistentVolumes, or get one in particular.
// All objects returned here must be treated as read-only.
type PersistentVolumeLister interface {
	// List lists all PersistentVolumes in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.PersistentVolume, err error)
	// Get retrieves the PersistentVolume from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*corev1.PersistentVolume, error)
	PersistentVolumeListerExpansion
}

// persistentVolumeLister can list all PersistentVolumes inside a workspace.
type persistentVolumeLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all PersistentVolumes in the indexer for a workspace.
func (s *persistentVolumeLister) List(selector labels.Selector) (ret []*corev1.PersistentVolume, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.PersistentVolume))
	})
	return ret, err
}

// Get retrieves the PersistentVolume from the indexer for a given workspace and name.
func (s *persistentVolumeLister) Get(name string) (*corev1.PersistentVolume, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("persistentvolumes"), name)
	}
	return obj.(*corev1.PersistentVolume), nil
}

// NewPersistentVolumeLister returns a new PersistentVolumeLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewPersistentVolumeLister(indexer cache.Indexer) *persistentVolumeScopedLister {
	return &persistentVolumeScopedLister{indexer: indexer}
}

// persistentVolumeScopedLister can list all PersistentVolumes inside a workspace.
type persistentVolumeScopedLister struct {
	indexer cache.Indexer
}

// List lists all PersistentVolumes in the indexer for a workspace.
func (s *persistentVolumeScopedLister) List(selector labels.Selector) (ret []*corev1.PersistentVolume, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.PersistentVolume))
	})
	return ret, err
}

// Get retrieves the PersistentVolume from the indexer for a given workspace and name.
func (s *persistentVolumeScopedLister) Get(name string) (*corev1.PersistentVolume, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("persistentvolumes"), name)
	}
	return obj.(*corev1.PersistentVolume), nil
}
