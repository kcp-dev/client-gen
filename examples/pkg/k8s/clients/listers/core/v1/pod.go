//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	corev1 "acme.corp/pkg/apis/core/v1"
)

// PodClusterLister can list Pods across all workspaces, or scope down to a PodLister for one workspace.
// All objects returned here must be treated as read-only.
type PodClusterLister interface {
	// List lists all Pods in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Pod, err error)
	// Cluster returns a lister that can list and get Pods in one workspace.
	Cluster(clusterName logicalcluster.Name) PodLister
	PodClusterListerExpansion
}

type podClusterLister struct {
	indexer cache.Indexer
}

// NewPodClusterLister returns a new PodClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPodClusterLister(indexer cache.Indexer) *podClusterLister {
	return &podClusterLister{indexer: indexer}
}

// List lists all Pods in the indexer across all workspaces.
func (s *podClusterLister) List(selector labels.Selector) (ret []*corev1.Pod, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*corev1.Pod))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Pods.
func (s *podClusterLister) Cluster(clusterName logicalcluster.Name) PodLister {
	return &podLister{indexer: s.indexer, clusterName: clusterName}
}

// PodLister can list Pods across all namespaces, or scope down to a PodNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type PodLister interface {
	// List lists all Pods in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Pod, err error)
	// Pods returns a lister that can list and get Pods in one workspace and namespace.
	Pods(namespace string) PodNamespaceLister
	PodListerExpansion
}

// podLister can list all Pods inside a workspace or scope down to a PodLister for one namespace.
type podLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Pods in the indexer for a workspace.
func (s *podLister) List(selector labels.Selector) (ret []*corev1.Pod, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.Pod))
	})
	return ret, err
}

// Pods returns an object that can list and get Pods in one namespace.
func (s *podLister) Pods(namespace string) PodNamespaceLister {
	return &podNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// podNamespaceLister helps list and get Pods.
// All objects returned here must be treated as read-only.
type PodNamespaceLister interface {
	// List lists all Pods in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Pod, err error)
	// Get retrieves the Pod from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*corev1.Pod, error)
	PodNamespaceListerExpansion
}

// podNamespaceLister helps list and get Pods.
// All objects returned here must be treated as read-only.
type podNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all Pods in the indexer for a given workspace and namespace.
func (s *podNamespaceLister) List(selector labels.Selector) (ret []*corev1.Pod, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.Pod))
	})
	return ret, err
}

// Get retrieves the Pod from the indexer for a given workspace, namespace and name.
func (s *podNamespaceLister) Get(name string) (*corev1.Pod, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("pods"), name)
	}
	return obj.(*corev1.Pod), nil
}

// NewPodLister returns a new PodLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewPodLister(indexer cache.Indexer) *podScopedLister {
	return &podScopedLister{indexer: indexer}
}

// podScopedLister can list all Pods inside a workspace or scope down to a PodLister for one namespace.
type podScopedLister struct {
	indexer cache.Indexer
}

// List lists all Pods in the indexer for a workspace.
func (s *podScopedLister) List(selector labels.Selector) (ret []*corev1.Pod, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.Pod))
	})
	return ret, err
}

// Pods returns an object that can list and get Pods in one namespace.
func (s *podScopedLister) Pods(namespace string) PodNamespaceLister {
	return &podScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// podScopedNamespaceLister helps list and get Pods.
type podScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Pods in the indexer for a given workspace and namespace.
func (s *podScopedNamespaceLister) List(selector labels.Selector) (ret []*corev1.Pod, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.Pod))
	})
	return ret, err
}

// Get retrieves the Pod from the indexer for a given workspace, namespace and name.
func (s *podScopedNamespaceLister) Get(name string) (*corev1.Pod, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("pods"), name)
	}
	return obj.(*corev1.Pod), nil
}
