//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	corev1 "acme.corp/pkg/apis/core/v1"
)

// ReplicationControllerClusterLister can list ReplicationControllers across all workspaces, or scope down to a ReplicationControllerLister for one workspace.
// All objects returned here must be treated as read-only.
type ReplicationControllerClusterLister interface {
	// List lists all ReplicationControllers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.ReplicationController, err error)
	// Cluster returns a lister that can list and get ReplicationControllers in one workspace.
	Cluster(clusterName logicalcluster.Name) ReplicationControllerLister
	ReplicationControllerClusterListerExpansion
}

type replicationControllerClusterLister struct {
	indexer cache.Indexer
}

// NewReplicationControllerClusterLister returns a new ReplicationControllerClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewReplicationControllerClusterLister(indexer cache.Indexer) *replicationControllerClusterLister {
	return &replicationControllerClusterLister{indexer: indexer}
}

// List lists all ReplicationControllers in the indexer across all workspaces.
func (s *replicationControllerClusterLister) List(selector labels.Selector) (ret []*corev1.ReplicationController, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*corev1.ReplicationController))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ReplicationControllers.
func (s *replicationControllerClusterLister) Cluster(clusterName logicalcluster.Name) ReplicationControllerLister {
	return &replicationControllerLister{indexer: s.indexer, clusterName: clusterName}
}

// ReplicationControllerLister can list ReplicationControllers across all namespaces, or scope down to a ReplicationControllerNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type ReplicationControllerLister interface {
	// List lists all ReplicationControllers in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.ReplicationController, err error)
	// ReplicationControllers returns a lister that can list and get ReplicationControllers in one workspace and namespace.
	ReplicationControllers(namespace string) ReplicationControllerNamespaceLister
	ReplicationControllerListerExpansion
}

// replicationControllerLister can list all ReplicationControllers inside a workspace or scope down to a ReplicationControllerLister for one namespace.
type replicationControllerLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ReplicationControllers in the indexer for a workspace.
func (s *replicationControllerLister) List(selector labels.Selector) (ret []*corev1.ReplicationController, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.ReplicationController))
	})
	return ret, err
}

// ReplicationControllers returns an object that can list and get ReplicationControllers in one namespace.
func (s *replicationControllerLister) ReplicationControllers(namespace string) ReplicationControllerNamespaceLister {
	return &replicationControllerNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// replicationControllerNamespaceLister helps list and get ReplicationControllers.
// All objects returned here must be treated as read-only.
type ReplicationControllerNamespaceLister interface {
	// List lists all ReplicationControllers in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.ReplicationController, err error)
	// Get retrieves the ReplicationController from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*corev1.ReplicationController, error)
	ReplicationControllerNamespaceListerExpansion
}

// replicationControllerNamespaceLister helps list and get ReplicationControllers.
// All objects returned here must be treated as read-only.
type replicationControllerNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all ReplicationControllers in the indexer for a given workspace and namespace.
func (s *replicationControllerNamespaceLister) List(selector labels.Selector) (ret []*corev1.ReplicationController, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.ReplicationController))
	})
	return ret, err
}

// Get retrieves the ReplicationController from the indexer for a given workspace, namespace and name.
func (s *replicationControllerNamespaceLister) Get(name string) (*corev1.ReplicationController, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("replicationcontrollers"), name)
	}
	return obj.(*corev1.ReplicationController), nil
}

// NewReplicationControllerLister returns a new ReplicationControllerLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewReplicationControllerLister(indexer cache.Indexer) *replicationControllerScopedLister {
	return &replicationControllerScopedLister{indexer: indexer}
}

// replicationControllerScopedLister can list all ReplicationControllers inside a workspace or scope down to a ReplicationControllerLister for one namespace.
type replicationControllerScopedLister struct {
	indexer cache.Indexer
}

// List lists all ReplicationControllers in the indexer for a workspace.
func (s *replicationControllerScopedLister) List(selector labels.Selector) (ret []*corev1.ReplicationController, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.ReplicationController))
	})
	return ret, err
}

// ReplicationControllers returns an object that can list and get ReplicationControllers in one namespace.
func (s *replicationControllerScopedLister) ReplicationControllers(namespace string) ReplicationControllerNamespaceLister {
	return &replicationControllerScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// replicationControllerScopedNamespaceLister helps list and get ReplicationControllers.
type replicationControllerScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicationControllers in the indexer for a given workspace and namespace.
func (s *replicationControllerScopedNamespaceLister) List(selector labels.Selector) (ret []*corev1.ReplicationController, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.ReplicationController))
	})
	return ret, err
}

// Get retrieves the ReplicationController from the indexer for a given workspace, namespace and name.
func (s *replicationControllerScopedNamespaceLister) Get(name string) (*corev1.ReplicationController, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("replicationcontrollers"), name)
	}
	return obj.(*corev1.ReplicationController), nil
}
