//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	corev1 "acme.corp/pkg/apis/core/v1"
)

// LimitRangeClusterLister can list LimitRanges across all workspaces, or scope down to a LimitRangeLister for one workspace.
// All objects returned here must be treated as read-only.
type LimitRangeClusterLister interface {
	// List lists all LimitRanges in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.LimitRange, err error)
	// Cluster returns a lister that can list and get LimitRanges in one workspace.
	Cluster(clusterName logicalcluster.Name) LimitRangeLister
	LimitRangeClusterListerExpansion
}

type limitRangeClusterLister struct {
	indexer cache.Indexer
}

// NewLimitRangeClusterLister returns a new LimitRangeClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewLimitRangeClusterLister(indexer cache.Indexer) *limitRangeClusterLister {
	return &limitRangeClusterLister{indexer: indexer}
}

// List lists all LimitRanges in the indexer across all workspaces.
func (s *limitRangeClusterLister) List(selector labels.Selector) (ret []*corev1.LimitRange, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*corev1.LimitRange))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get LimitRanges.
func (s *limitRangeClusterLister) Cluster(clusterName logicalcluster.Name) LimitRangeLister {
	return &limitRangeLister{indexer: s.indexer, clusterName: clusterName}
}

// LimitRangeLister can list LimitRanges across all namespaces, or scope down to a LimitRangeNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type LimitRangeLister interface {
	// List lists all LimitRanges in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.LimitRange, err error)
	// LimitRanges returns a lister that can list and get LimitRanges in one workspace and namespace.
	LimitRanges(namespace string) LimitRangeNamespaceLister
	LimitRangeListerExpansion
}

// limitRangeLister can list all LimitRanges inside a workspace or scope down to a LimitRangeLister for one namespace.
type limitRangeLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all LimitRanges in the indexer for a workspace.
func (s *limitRangeLister) List(selector labels.Selector) (ret []*corev1.LimitRange, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.LimitRange))
	})
	return ret, err
}

// LimitRanges returns an object that can list and get LimitRanges in one namespace.
func (s *limitRangeLister) LimitRanges(namespace string) LimitRangeNamespaceLister {
	return &limitRangeNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// limitRangeNamespaceLister helps list and get LimitRanges.
// All objects returned here must be treated as read-only.
type LimitRangeNamespaceLister interface {
	// List lists all LimitRanges in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.LimitRange, err error)
	// Get retrieves the LimitRange from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*corev1.LimitRange, error)
	LimitRangeNamespaceListerExpansion
}

// limitRangeNamespaceLister helps list and get LimitRanges.
// All objects returned here must be treated as read-only.
type limitRangeNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all LimitRanges in the indexer for a given workspace and namespace.
func (s *limitRangeNamespaceLister) List(selector labels.Selector) (ret []*corev1.LimitRange, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.LimitRange))
	})
	return ret, err
}

// Get retrieves the LimitRange from the indexer for a given workspace, namespace and name.
func (s *limitRangeNamespaceLister) Get(name string) (*corev1.LimitRange, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("limitranges"), name)
	}
	return obj.(*corev1.LimitRange), nil
}

// NewLimitRangeLister returns a new LimitRangeLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewLimitRangeLister(indexer cache.Indexer) *limitRangeScopedLister {
	return &limitRangeScopedLister{indexer: indexer}
}

// limitRangeScopedLister can list all LimitRanges inside a workspace or scope down to a LimitRangeLister for one namespace.
type limitRangeScopedLister struct {
	indexer cache.Indexer
}

// List lists all LimitRanges in the indexer for a workspace.
func (s *limitRangeScopedLister) List(selector labels.Selector) (ret []*corev1.LimitRange, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.LimitRange))
	})
	return ret, err
}

// LimitRanges returns an object that can list and get LimitRanges in one namespace.
func (s *limitRangeScopedLister) LimitRanges(namespace string) LimitRangeNamespaceLister {
	return &limitRangeScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// limitRangeScopedNamespaceLister helps list and get LimitRanges.
type limitRangeScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LimitRanges in the indexer for a given workspace and namespace.
func (s *limitRangeScopedNamespaceLister) List(selector labels.Selector) (ret []*corev1.LimitRange, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*corev1.LimitRange))
	})
	return ret, err
}

// Get retrieves the LimitRange from the indexer for a given workspace, namespace and name.
func (s *limitRangeScopedNamespaceLister) Get(name string) (*corev1.LimitRange, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("limitranges"), name)
	}
	return obj.(*corev1.LimitRange), nil
}
