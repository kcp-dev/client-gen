//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	appsv1beta1 "acme.corp/pkg/apis/apps/v1beta1"
)

// ControllerRevisionClusterLister can list ControllerRevisions across all workspaces, or scope down to a ControllerRevisionLister for one workspace.
// All objects returned here must be treated as read-only.
type ControllerRevisionClusterLister interface {
	// List lists all ControllerRevisions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*appsv1beta1.ControllerRevision, err error)
	// Cluster returns a lister that can list and get ControllerRevisions in one workspace.
	Cluster(clusterName logicalcluster.Name) ControllerRevisionLister
	ControllerRevisionClusterListerExpansion
}

type controllerRevisionClusterLister struct {
	indexer cache.Indexer
}

// NewControllerRevisionClusterLister returns a new ControllerRevisionClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewControllerRevisionClusterLister(indexer cache.Indexer) *controllerRevisionClusterLister {
	return &controllerRevisionClusterLister{indexer: indexer}
}

// List lists all ControllerRevisions in the indexer across all workspaces.
func (s *controllerRevisionClusterLister) List(selector labels.Selector) (ret []*appsv1beta1.ControllerRevision, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*appsv1beta1.ControllerRevision))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ControllerRevisions.
func (s *controllerRevisionClusterLister) Cluster(clusterName logicalcluster.Name) ControllerRevisionLister {
	return &controllerRevisionLister{indexer: s.indexer, clusterName: clusterName}
}

// ControllerRevisionLister can list ControllerRevisions across all namespaces, or scope down to a ControllerRevisionNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type ControllerRevisionLister interface {
	// List lists all ControllerRevisions in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*appsv1beta1.ControllerRevision, err error)
	// ControllerRevisions returns a lister that can list and get ControllerRevisions in one workspace and namespace.
	ControllerRevisions(namespace string) ControllerRevisionNamespaceLister
	ControllerRevisionListerExpansion
}

// controllerRevisionLister can list all ControllerRevisions inside a workspace or scope down to a ControllerRevisionLister for one namespace.
type controllerRevisionLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ControllerRevisions in the indexer for a workspace.
func (s *controllerRevisionLister) List(selector labels.Selector) (ret []*appsv1beta1.ControllerRevision, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*appsv1beta1.ControllerRevision))
	})
	return ret, err
}

// ControllerRevisions returns an object that can list and get ControllerRevisions in one namespace.
func (s *controllerRevisionLister) ControllerRevisions(namespace string) ControllerRevisionNamespaceLister {
	return &controllerRevisionNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// controllerRevisionNamespaceLister helps list and get ControllerRevisions.
// All objects returned here must be treated as read-only.
type ControllerRevisionNamespaceLister interface {
	// List lists all ControllerRevisions in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*appsv1beta1.ControllerRevision, err error)
	// Get retrieves the ControllerRevision from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*appsv1beta1.ControllerRevision, error)
	ControllerRevisionNamespaceListerExpansion
}

// controllerRevisionNamespaceLister helps list and get ControllerRevisions.
// All objects returned here must be treated as read-only.
type controllerRevisionNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all ControllerRevisions in the indexer for a given workspace and namespace.
func (s *controllerRevisionNamespaceLister) List(selector labels.Selector) (ret []*appsv1beta1.ControllerRevision, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*appsv1beta1.ControllerRevision))
	})
	return ret, err
}

// Get retrieves the ControllerRevision from the indexer for a given workspace, namespace and name.
func (s *controllerRevisionNamespaceLister) Get(name string) (*appsv1beta1.ControllerRevision, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(appsv1beta1.Resource("controllerrevisions"), name)
	}
	return obj.(*appsv1beta1.ControllerRevision), nil
}

// NewControllerRevisionLister returns a new ControllerRevisionLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewControllerRevisionLister(indexer cache.Indexer) *controllerRevisionScopedLister {
	return &controllerRevisionScopedLister{indexer: indexer}
}

// controllerRevisionScopedLister can list all ControllerRevisions inside a workspace or scope down to a ControllerRevisionLister for one namespace.
type controllerRevisionScopedLister struct {
	indexer cache.Indexer
}

// List lists all ControllerRevisions in the indexer for a workspace.
func (s *controllerRevisionScopedLister) List(selector labels.Selector) (ret []*appsv1beta1.ControllerRevision, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*appsv1beta1.ControllerRevision))
	})
	return ret, err
}

// ControllerRevisions returns an object that can list and get ControllerRevisions in one namespace.
func (s *controllerRevisionScopedLister) ControllerRevisions(namespace string) ControllerRevisionNamespaceLister {
	return &controllerRevisionScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// controllerRevisionScopedNamespaceLister helps list and get ControllerRevisions.
type controllerRevisionScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ControllerRevisions in the indexer for a given workspace and namespace.
func (s *controllerRevisionScopedNamespaceLister) List(selector labels.Selector) (ret []*appsv1beta1.ControllerRevision, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*appsv1beta1.ControllerRevision))
	})
	return ret, err
}

// Get retrieves the ControllerRevision from the indexer for a given workspace, namespace and name.
func (s *controllerRevisionScopedNamespaceLister) Get(name string) (*appsv1beta1.ControllerRevision, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(appsv1beta1.Resource("controllerrevisions"), name)
	}
	return obj.(*appsv1beta1.ControllerRevision), nil
}
