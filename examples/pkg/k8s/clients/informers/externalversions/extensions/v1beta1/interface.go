//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"acme.corp/pkg/kcp/clients/informers/externalversions/internalinterfaces"
)

type ClusterInterface interface {
	// Deployments returns a DeploymentClusterInformer
	Deployments() DeploymentClusterInformer
	// DaemonSets returns a DaemonSetClusterInformer
	DaemonSets() DaemonSetClusterInformer
	// Ingresses returns a IngressClusterInformer
	Ingresses() IngressClusterInformer
	// ReplicaSets returns a ReplicaSetClusterInformer
	ReplicaSets() ReplicaSetClusterInformer
	// NetworkPolicies returns a NetworkPolicyClusterInformer
	NetworkPolicies() NetworkPolicyClusterInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new ClusterInterface.
func New(f internalinterfaces.SharedInformerFactory, tweakListOptions internalinterfaces.TweakListOptionsFunc) ClusterInterface {
	return &version{factory: f, tweakListOptions: tweakListOptions}
}

// Deployments returns a DeploymentClusterInformer
func (v *version) Deployments() DeploymentClusterInformer {
	return &deploymentClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// DaemonSets returns a DaemonSetClusterInformer
func (v *version) DaemonSets() DaemonSetClusterInformer {
	return &daemonSetClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// Ingresses returns a IngressClusterInformer
func (v *version) Ingresses() IngressClusterInformer {
	return &ingressClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// ReplicaSets returns a ReplicaSetClusterInformer
func (v *version) ReplicaSets() ReplicaSetClusterInformer {
	return &replicaSetClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// NetworkPolicies returns a NetworkPolicyClusterInformer
func (v *version) NetworkPolicies() NetworkPolicyClusterInformer {
	return &networkPolicyClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

type Interface interface {
	// Deployments returns a DeploymentInformer
	Deployments() DeploymentInformer
	// DaemonSets returns a DaemonSetInformer
	DaemonSets() DaemonSetInformer
	// Ingresses returns a IngressInformer
	Ingresses() IngressInformer
	// ReplicaSets returns a ReplicaSetInformer
	ReplicaSets() ReplicaSetInformer
	// NetworkPolicies returns a NetworkPolicyInformer
	NetworkPolicies() NetworkPolicyInformer
}

type scopedVersion struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// New returns a new ClusterInterface.
func NewScoped(f internalinterfaces.SharedScopedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &scopedVersion{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// Deployments returns a DeploymentInformer
func (v *scopedVersion) Deployments() DeploymentInformer {
	return &deploymentScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// DaemonSets returns a DaemonSetInformer
func (v *scopedVersion) DaemonSets() DaemonSetInformer {
	return &daemonSetScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// Ingresses returns a IngressInformer
func (v *scopedVersion) Ingresses() IngressInformer {
	return &ingressScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// ReplicaSets returns a ReplicaSetInformer
func (v *scopedVersion) ReplicaSets() ReplicaSetInformer {
	return &replicaSetScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// NetworkPolicies returns a NetworkPolicyInformer
func (v *scopedVersion) NetworkPolicies() NetworkPolicyInformer {
	return &networkPolicyScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}
