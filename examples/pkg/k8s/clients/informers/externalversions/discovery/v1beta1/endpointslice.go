//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	discoveryv1beta1 "acme.corp/pkg/apis/discovery/v1beta1"
	scopedclientset "acme.corp/pkg/generated/clientset/versioned"
	clientset "acme.corp/pkg/kcp/clients/clientset/versioned"
	"acme.corp/pkg/kcp/clients/informers/externalversions/internalinterfaces"
	discoveryv1beta1listers "acme.corp/pkg/kcp/clients/listers/discovery/v1beta1"
)

// EndpointSliceClusterInformer provides access to a shared informer and lister for
// EndpointSlices.
type EndpointSliceClusterInformer interface {
	Cluster(logicalcluster.Name) EndpointSliceInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() discoveryv1beta1listers.EndpointSliceClusterLister
}

type endpointSliceClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewEndpointSliceClusterInformer constructs a new informer for EndpointSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEndpointSliceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEndpointSliceClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredEndpointSliceClusterInformer constructs a new informer for EndpointSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEndpointSliceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DiscoveryV1beta1().EndpointSlices().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DiscoveryV1beta1().EndpointSlices().Watch(context.TODO(), options)
			},
		},
		&discoveryv1beta1.EndpointSlice{},
		resyncPeriod,
		indexers,
	)
}

func (f *endpointSliceClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEndpointSliceClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc},
		f.tweakListOptions,
	)
}

func (f *endpointSliceClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&discoveryv1beta1.EndpointSlice{}, f.defaultInformer)
}

func (f *endpointSliceClusterInformer) Lister() discoveryv1beta1listers.EndpointSliceClusterLister {
	return discoveryv1beta1listers.NewEndpointSliceClusterLister(f.Informer().GetIndexer())
}

// EndpointSliceInformer provides access to a shared informer and lister for
// EndpointSlices.
type EndpointSliceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() discoveryv1beta1listers.EndpointSliceLister
}

func (f *endpointSliceClusterInformer) Cluster(clusterName logicalcluster.Name) EndpointSliceInformer {
	return &endpointSliceInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type endpointSliceInformer struct {
	informer cache.SharedIndexInformer
	lister   discoveryv1beta1listers.EndpointSliceLister
}

func (f *endpointSliceInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *endpointSliceInformer) Lister() discoveryv1beta1listers.EndpointSliceLister {
	return f.lister
}

type endpointSliceScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

func (f *endpointSliceScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&discoveryv1beta1.EndpointSlice{}, f.defaultInformer)
}

func (f *endpointSliceScopedInformer) Lister() discoveryv1beta1listers.EndpointSliceLister {
	return discoveryv1beta1listers.NewEndpointSliceLister(f.Informer().GetIndexer())
}

// NewEndpointSliceInformer constructs a new informer for EndpointSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEndpointSliceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredEndpointSliceInformer(client, resyncPeriod, namespace, indexers, nil)
}

// NewFilteredEndpointSliceInformer constructs a new informer for EndpointSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEndpointSliceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DiscoveryV1beta1().EndpointSlices(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DiscoveryV1beta1().EndpointSlices(namespace).Watch(context.TODO(), options)
			},
		},
		&discoveryv1beta1.EndpointSlice{},
		resyncPeriod,
		indexers,
	)
}

func (f *endpointSliceScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredEndpointSliceInformer(client, resyncPeriod, f.namespace, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, f.tweakListOptions)
}
