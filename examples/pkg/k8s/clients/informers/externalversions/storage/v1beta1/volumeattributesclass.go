//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	storagev1beta1 "acme.corp/pkg/apis/storage/v1beta1"
	scopedclientset "acme.corp/pkg/generated/clientset/versioned"
	clientset "acme.corp/pkg/kcp/clients/clientset/versioned"
	"acme.corp/pkg/kcp/clients/informers/externalversions/internalinterfaces"
	storagev1beta1listers "acme.corp/pkg/kcp/clients/listers/storage/v1beta1"
)

// VolumeAttributesClassClusterInformer provides access to a shared informer and lister for
// VolumeAttributesClasses.
type VolumeAttributesClassClusterInformer interface {
	Cluster(logicalcluster.Name) VolumeAttributesClassInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() storagev1beta1listers.VolumeAttributesClassClusterLister
}

type volumeAttributesClassClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewVolumeAttributesClassClusterInformer constructs a new informer for VolumeAttributesClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVolumeAttributesClassClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredVolumeAttributesClassClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredVolumeAttributesClassClusterInformer constructs a new informer for VolumeAttributesClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVolumeAttributesClassClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1beta1().VolumeAttributesClasses().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1beta1().VolumeAttributesClasses().Watch(context.TODO(), options)
			},
		},
		&storagev1beta1.VolumeAttributesClass{},
		resyncPeriod,
		indexers,
	)
}

func (f *volumeAttributesClassClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredVolumeAttributesClassClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *volumeAttributesClassClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&storagev1beta1.VolumeAttributesClass{}, f.defaultInformer)
}

func (f *volumeAttributesClassClusterInformer) Lister() storagev1beta1listers.VolumeAttributesClassClusterLister {
	return storagev1beta1listers.NewVolumeAttributesClassClusterLister(f.Informer().GetIndexer())
}

// VolumeAttributesClassInformer provides access to a shared informer and lister for
// VolumeAttributesClasses.
type VolumeAttributesClassInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() storagev1beta1listers.VolumeAttributesClassLister
}

func (f *volumeAttributesClassClusterInformer) Cluster(clusterName logicalcluster.Name) VolumeAttributesClassInformer {
	return &volumeAttributesClassInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type volumeAttributesClassInformer struct {
	informer cache.SharedIndexInformer
	lister   storagev1beta1listers.VolumeAttributesClassLister
}

func (f *volumeAttributesClassInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *volumeAttributesClassInformer) Lister() storagev1beta1listers.VolumeAttributesClassLister {
	return f.lister
}

type volumeAttributesClassScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *volumeAttributesClassScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&storagev1beta1.VolumeAttributesClass{}, f.defaultInformer)
}

func (f *volumeAttributesClassScopedInformer) Lister() storagev1beta1listers.VolumeAttributesClassLister {
	return storagev1beta1listers.NewVolumeAttributesClassLister(f.Informer().GetIndexer())
}

// NewVolumeAttributesClassInformer constructs a new informer for VolumeAttributesClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVolumeAttributesClassInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredVolumeAttributesClassInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredVolumeAttributesClassInformer constructs a new informer for VolumeAttributesClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVolumeAttributesClassInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1beta1().VolumeAttributesClasses().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1beta1().VolumeAttributesClasses().Watch(context.TODO(), options)
			},
		},
		&storagev1beta1.VolumeAttributesClass{},
		resyncPeriod,
		indexers,
	)
}

func (f *volumeAttributesClassScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredVolumeAttributesClassInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
