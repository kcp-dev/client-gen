//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	"acme.corp/pkg/kcp/clients/informers/externalversions/internalinterfaces"
)

type ClusterInterface interface {
	// NetworkPolicies returns a NetworkPolicyClusterInformer
	NetworkPolicies() NetworkPolicyClusterInformer
	// Ingresses returns a IngressClusterInformer
	Ingresses() IngressClusterInformer
	// IngressClasses returns a IngressClassClusterInformer
	IngressClasses() IngressClassClusterInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new ClusterInterface.
func New(f internalinterfaces.SharedInformerFactory, tweakListOptions internalinterfaces.TweakListOptionsFunc) ClusterInterface {
	return &version{factory: f, tweakListOptions: tweakListOptions}
}

// NetworkPolicies returns a NetworkPolicyClusterInformer
func (v *version) NetworkPolicies() NetworkPolicyClusterInformer {
	return &networkPolicyClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// Ingresses returns a IngressClusterInformer
func (v *version) Ingresses() IngressClusterInformer {
	return &ingressClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// IngressClasses returns a IngressClassClusterInformer
func (v *version) IngressClasses() IngressClassClusterInformer {
	return &ingressClassClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

type Interface interface {
	// NetworkPolicies returns a NetworkPolicyInformer
	NetworkPolicies() NetworkPolicyInformer
	// Ingresses returns a IngressInformer
	Ingresses() IngressInformer
	// IngressClasses returns a IngressClassInformer
	IngressClasses() IngressClassInformer
}

type scopedVersion struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// New returns a new ClusterInterface.
func NewScoped(f internalinterfaces.SharedScopedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &scopedVersion{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// NetworkPolicies returns a NetworkPolicyInformer
func (v *scopedVersion) NetworkPolicies() NetworkPolicyInformer {
	return &networkPolicyScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// Ingresses returns a IngressInformer
func (v *scopedVersion) Ingresses() IngressInformer {
	return &ingressScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// IngressClasses returns a IngressClassInformer
func (v *scopedVersion) IngressClasses() IngressClassInformer {
	return &ingressClassScopedInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}
