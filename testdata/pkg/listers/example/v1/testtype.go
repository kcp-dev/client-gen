
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code auto-generated. DO NOT EDIT.

package v1

import (
	TestTypeapiv1 "github.com/kcp-dev/code-generator/testdata/pkg/apis/example/v1"
	"github.com/kcp-dev/apimachinery/pkg/logicalcluster"
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
)

// Cluster returns an object that can list and get TestType.
func (s *testTypeLister) Cluster(cluster logicalcluster.LogicalCluster) TestTypeClusterLister {
	return &testTypeClusterLister{indexer: s.indexer, cluster: cluster}
}

// testTypeLister implements the TestTypeLister interface.
type testTypeClusterLister struct {
	indexer cache.Indexer
	cluster logicalcluster.LogicalCluster
}

// List lists all TestType in the indexer.
func (c *testTypeClusterLister) List(selector labels.Selector) (ret []*examplev1.TestType, err error) {
	list, err := c.indexer.ByIndex(apimachinerycache.ClusterIndexName, c.cluster.String())
	if err != nil {
		return nil, err
	}

	if selector == nil {
		selector = labels.Everything()
	}
	for i := range list {
		obj := list[i].(*examplev1.TestType)
		if selector.Matches(labels.Set(obj.GetLabels())) {
			ret = append(ret, obj)
		}
	}

	return ret, err
}


// TestTypes returns an object that can list and get TestTypes.
func (c *testTypeClusterLister) TestTypes(namespace string) testTypeNamespaceLister {
	return testTypeLister{indexer: c.indexer, cluster: c.cluster, namespace: namespace}
}

// TestTypeNamespaceLister helps list and get TestTypes.
// All objects returned here must be treated as read-only.
type TestTypeNamespaceLister interface {
	// List lists all TestTypes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*examplev1.TestType, err error)
	// Get retrieves the TestType from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*examplev1.TestType, error)
	// Note(kcp): Workspace-capable Lister implementation doesn't support support expansions.
}

// testTypeNamespaceLister implements the TestTypeLister
// interface.
type testTypeNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.LogicalCluster
	namespace string
}

// List lists all TestTypes in the indexer for a given namespace.
func (c testTypeNamespaceLister) List(selector labels.Selector) (ret []*examplev1.TestType, err error) {
	list, err := c.indexer.Index(apimachinerycache.ClusterAndNamespaceIndexName, &metav1.ObjectMeta{
		ZZZ_DeprecatedClusterName: c.cluster.String(),
		Namespace:                 c.namespace,
	})
	if err != nil {
		return nil, err
	}

	if selector == nil {
		selector = labels.Everything()
	}
	for i := range list {
		obj := list[i].(*examplev1.TestType)
		if selector.Matches(labels.Set(obj.GetLabels())) {
			ret = append(ret, cm)
		}
	}

	return ret, err
}

// Get retrieves the TestType from the indexer for a given namespace and name.
func (c testTypeLister) Get(name string) (*examplev1.TestType, error) {
	meta := &metav1.ObjectMeta{
		ZZZ_DeprecatedClusterName: c.cluster.String(),
		Namespace:                 c.namespace,
		Name:                      name,
	}
	obj, exists, err := c.indexer.Get(meta)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(examplev1.Resource("testType"), name)
	}
	return obj.(*examplev1.TestType), nil
}


