
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code auto-generated. DO NOT EDIT.

package v1

import (
	ClusterTestTypeapiv1 "github.com/kcp-dev/code-generator/testdata/pkg/apis/example/v1"
	"github.com/kcp-dev/apimachinery/pkg/logicalcluster"
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
)

// Cluster returns an object that can list and get ClusterTestType.
func (s *clusterTestTypeLister) Cluster(cluster logicalcluster.LogicalCluster) ClusterTestTypeClusterLister {
	return &clusterTestTypeClusterLister{indexer: s.indexer, cluster: cluster}
}

// clusterTestTypeLister implements the ClusterTestTypeLister interface.
type clusterTestTypeClusterLister struct {
	indexer cache.Indexer
	cluster logicalcluster.LogicalCluster
}

// List lists all ClusterTestType in the indexer.
func (c *clusterTestTypeClusterLister) List(selector labels.Selector) (ret []*examplev1.ClusterTestType, err error) {
	list, err := c.indexer.ByIndex(apimachinerycache.ClusterIndexName, c.cluster.String())
	if err != nil {
		return nil, err
	}

	if selector == nil {
		selector = labels.Everything()
	}
	for i := range list {
		obj := list[i].(*examplev1.ClusterTestType)
		if selector.Matches(labels.Set(obj.GetLabels())) {
			ret = append(ret, obj)
		}
	}

	return ret, err
}


